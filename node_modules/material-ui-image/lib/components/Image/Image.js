'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _RefreshIndicator = require('material-ui/RefreshIndicator');

var _RefreshIndicator2 = _interopRequireDefault(_RefreshIndicator);

var _brokenImage = require('material-ui/svg-icons/image/broken-image');

var _brokenImage2 = _interopRequireDefault(_brokenImage);

var _colors = require('material-ui/styles/colors');

var colors = _interopRequireWildcard(_colors);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getRandomColor() {
  var colorNames = Object.keys(colors);
  return colors[colorNames[Math.floor(colorNames.length * Math.random())]];
}

/**
 * Images are ugly until they're loaded. Materialize it with material image! It will show a random material color as background and a loading animation until it's fully loaded.
 * @see [Image loading patterns](https://material.io/guidelines/patterns/loading-images.html)
 */

var Image = function (_Component) {
  _inherits(Image, _Component);

  function Image(props) {
    _classCallCheck(this, Image);

    var _this = _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).call(this, props));

    _this.state = {
      color: getRandomColor()
    };
    return _this;
  }

  _createClass(Image, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.src !== this.props.src) {
        this.setState({
          color: getRandomColor()
        });
      }
    }
  }, {
    key: 'getStyles',
    value: function getStyles() {
      var _props = this.props;
      var color = _props.color;
      var errorSize = _props.errorSize;
      var style = _props.style;


      var styles = {
        root: {
          width: 300,
          height: 200,
          backgroundColor: color || this.state.color
        },
        loading: {
          position: 'relative'
        },
        img: {
          width: 'inherit',
          height: 'inherit',
          opacity: !this.state.imageLoaded ? 0 : 1,
          animation: !this.state.imageLoaded ? '' : 'filter-animation 1s'
        },
        errorContainer: {
          position: 'relative',
          left: style && style.width ? style.width / 2 - errorSize : 300 / 2 - errorSize / 2,
          top: style && style.height ? style.height / 2 - errorSize : 200 / 2 - errorSize / 2
        },
        errorIcon: {
          width: errorSize,
          height: errorSize
        }
      };

      return styles;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var styles = this.getStyles();

      var _props2 = this.props;
      var color = _props2.color;
      var disableError = _props2.disableError;
      var disableSpinner = _props2.disableSpinner;
      var errorSize = _props2.errorSize;
      var imageStyle = _props2.imageStyle;
      var style = _props2.style;
      var loadingSize = _props2.loadingSize;
      var loadingStyle = _props2.loadingStyle;
      var onTouchTap = _props2.onTouchTap;

      var image = _objectWithoutProperties(_props2, ['color', 'disableError', 'disableSpinner', 'errorSize', 'imageStyle', 'style', 'loadingSize', 'loadingStyle', 'onTouchTap']);

      return _react2.default.createElement(
        'div',
        {
          style: _extends({}, styles.root, style),
          onTouchTap: onTouchTap
        },
        !disableSpinner && !this.state.imageLoaded && !this.state.imageError && _react2.default.createElement(_RefreshIndicator2.default, {
          size: loadingSize,
          left: style && style.width ? style.width / 2 - loadingSize : styles.root.width / 2 - loadingSize / 2,
          top: style && style.height ? style.height / 2 - loadingSize : styles.root.height / 2 - loadingSize / 2,
          status: 'loading',
          style: _extends({}, styles.loading, loadingStyle)
        }),
        !disableError && this.state.imageError && _react2.default.createElement(
          'div',
          { style: styles.errorContainer },
          _react2.default.createElement(_brokenImage2.default, {
            color: colors.grey300,
            style: styles.errorIcon
          })
        ),
        image.src && !this.state.imageError && _react2.default.createElement('img', _extends({}, image, {
          style: _extends({}, styles.img, imageStyle),
          onLoad: function onLoad() {
            return _this2.setState({ imageLoaded: true });
          },
          onError: function onError() {
            return _this2.setState({ imageError: true });
          }
        }))
      );
    }
  }]);

  return Image;
}(_react.Component);

exports.default = Image;


Image.defaultProps = {
  disableError: false,
  disableSpinner: false,
  errorSize: 48,
  loadingSize: 40
};

Image.propTypes = {
  /** Specifies the URL of an image. */
  src: _propTypes2.default.string.isRequired,
  /** Override the background color. */
  color: _propTypes2.default.string,
  /** Disables the error icon if set to true. */
  disableError: _propTypes2.default.bool,
  /** Disables the loading spinner if set to true. */
  disableSpinner: _propTypes2.default.bool,
  /** Set the size of the error icon. */
  errorSize: _propTypes2.default.number,
  /** Override the inline-styles of the image. */
  imageStyle: _propTypes2.default.object,
  /** Set the size of the refresh indicator. */
  loadingSize: _propTypes2.default.number,
  /** Override the inline-styles of the refresh indicator. */
  loadingStyle: _propTypes2.default.object,
  /** Fired when the user clicks on the image happened. */
  onTouchTap: _propTypes2.default.func,
  /** Override the inline-styles of the root element. */
  style: _propTypes2.default.object
};